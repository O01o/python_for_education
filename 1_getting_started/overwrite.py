# 最初に、3という値を入れる。
a = 3
print("a:", a)

# ここまではOK。
# ただ、プログラミングで注意してほしい点として、
# この、a = 3 の、"="。 このイコールは、
# 数学とプログラミングで若干意味が異なる。
# この地点で、aには3が入っている。
print("a:", a) # 再確認。

# しかし、この状態から、例えば…
a = 5
print("a:", a)
# 値を上書きをすることができる。この時、値は上書きされた
# ものが出力され、元の3はもう消えて無くなっている。
# 次に。

# こんなことすらもできる。出力してみよう。
a = a + 1
print("a:", a)
# 6になった。つまり、元のa=5に1が足され、6が出力された
# ことになる。ここで言いたいのは、
# 左辺のaと、右辺のaは別物。厳密には、(new)aと(old)aだ。
# a = a + 1 は、もう少し分かりやすく表現するなら、
# a ← a + 1 こう説明するのが望ましい。
# このように、プログラミングにおけるイコールとは、
# 左辺と右辺が相等であるという意味ではなく、
# 左辺の値に右辺の値を"代入する"という考えを表す。

# ちなみに、a = a + 1 は、表記としてややこしい。
# なので、この場合、"aは1加算される"という解釈に直せる。
a += 1
print("a:", a)
# これで、1加算されたことが分かった。ちなみに他にも、
# -=, *=, /= が使える。良かったら試してみて欲しい。

